// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: pkg/grpc/proto/tweet.proto

package grpc

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"strings"
	"time"
	"unicode/utf8"

	"github.com/golang/protobuf/ptypes"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = ptypes.DynamicAny{}
)

// define the regex for a UUID once up-front
var _tweet_uuidPattern = regexp.MustCompile("^[0-9a-fA-F]{8}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{12}$")

// Validate checks the field values on CreateTweetRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *CreateTweetRequest) Validate() error {
	if m == nil {
		return nil
	}

	if l := utf8.RuneCountInString(m.GetMessage()); l < 1 || l > 280 {
		return CreateTweetRequestValidationError{
			field:  "Message",
			reason: "value length must be between 1 and 280 runes, inclusive",
		}
	}

	return nil
}

// CreateTweetRequestValidationError is the validation error returned by
// CreateTweetRequest.Validate if the designated constraints aren't met.
type CreateTweetRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateTweetRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateTweetRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateTweetRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateTweetRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateTweetRequestValidationError) ErrorName() string {
	return "CreateTweetRequestValidationError"
}

// Error satisfies the builtin error interface
func (e CreateTweetRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateTweetRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateTweetRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateTweetRequestValidationError{}

// Validate checks the field values on CreateTweetResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *CreateTweetResponse) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for Id

	// no validation rules for Message

	return nil
}

// CreateTweetResponseValidationError is the validation error returned by
// CreateTweetResponse.Validate if the designated constraints aren't met.
type CreateTweetResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateTweetResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateTweetResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateTweetResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateTweetResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateTweetResponseValidationError) ErrorName() string {
	return "CreateTweetResponseValidationError"
}

// Error satisfies the builtin error interface
func (e CreateTweetResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateTweetResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateTweetResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateTweetResponseValidationError{}

// Validate checks the field values on ListTweetRequest with the rules defined
// in the proto definition for this message. If any rules are violated, an
// error is returned.
func (m *ListTweetRequest) Validate() error {
	if m == nil {
		return nil
	}

	return nil
}

// ListTweetRequestValidationError is the validation error returned by
// ListTweetRequest.Validate if the designated constraints aren't met.
type ListTweetRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListTweetRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListTweetRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListTweetRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListTweetRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListTweetRequestValidationError) ErrorName() string { return "ListTweetRequestValidationError" }

// Error satisfies the builtin error interface
func (e ListTweetRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListTweetRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListTweetRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListTweetRequestValidationError{}

// Validate checks the field values on ListTweetResponse with the rules defined
// in the proto definition for this message. If any rules are violated, an
// error is returned.
func (m *ListTweetResponse) Validate() error {
	if m == nil {
		return nil
	}

	for idx, item := range m.GetTweets() {
		_, _ = idx, item

		if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ListTweetResponseValidationError{
					field:  fmt.Sprintf("Tweets[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	return nil
}

// ListTweetResponseValidationError is the validation error returned by
// ListTweetResponse.Validate if the designated constraints aren't met.
type ListTweetResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListTweetResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListTweetResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListTweetResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListTweetResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListTweetResponseValidationError) ErrorName() string {
	return "ListTweetResponseValidationError"
}

// Error satisfies the builtin error interface
func (e ListTweetResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListTweetResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListTweetResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListTweetResponseValidationError{}

// Validate checks the field values on ListTweetResponse_Tweet with the rules
// defined in the proto definition for this message. If any rules are
// violated, an error is returned.
func (m *ListTweetResponse_Tweet) Validate() error {
	if m == nil {
		return nil
	}

	// no validation rules for Id

	// no validation rules for Message

	return nil
}

// ListTweetResponse_TweetValidationError is the validation error returned by
// ListTweetResponse_Tweet.Validate if the designated constraints aren't met.
type ListTweetResponse_TweetValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListTweetResponse_TweetValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListTweetResponse_TweetValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListTweetResponse_TweetValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListTweetResponse_TweetValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListTweetResponse_TweetValidationError) ErrorName() string {
	return "ListTweetResponse_TweetValidationError"
}

// Error satisfies the builtin error interface
func (e ListTweetResponse_TweetValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListTweetResponse_Tweet.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListTweetResponse_TweetValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListTweetResponse_TweetValidationError{}
